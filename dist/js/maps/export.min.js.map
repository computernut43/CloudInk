{"version":3,"names":[],"mappings":"","sources":["export.js"],"sourcesContent":["'use strict'\n\nconst i18n\t\t\t\t= require( './i18n.min' )\n\nconst { remote }\t\t= require( '@electron/remote' )\nconst Store\t\t\t\t= require( 'electron-store' )\nconst store\t\t\t\t= new Store()\nconst dialog\t\t\t= remote.dialog\nconst marked\t\t\t= require( 'marked' )\nconst removeMarkdown\t= require( 'remove-markdown' )\nconst pretty\t\t\t= require( 'pretty' )\nconst fs\t\t\t\t= require( 'fs-extra' )\nconst log\t\t\t\t= require( 'electron-log' )\n\n\nmodule.exports.exportNote = function( note ) {\n\t\n\tconst exportPath = store.get('exportPath')\n\t\n\tdialog.showSaveDialog(remote.getCurrentWindow(), {\n\t\t\n\t\tdefaultPath: `${exportPath}/${note.title}`,\n\t\tbuttonLabel: i18n.t('app:dialog.button.export', 'Export Note'),\n\t\tproperties: [\t'openDirectory',\n\t\t\t\t\t\t'createDirectory'\n\t\t\t\t\t],\n\t\tfilters: [\n\t\t\t\t{\tname:\t\ti18n.t('app:dialog.format.html', 'html'),\n\t\t\t\t\textensions:\t['html']\n\t\t\t\t},\n\t\t\t\t{\tname:\t\ti18n.t('app:dialog.format.md', 'markdown'),\n\t\t\t\t\textensions:\t['md']\n\t\t\t\t},\n\t\t\t\t{\tname:\t\ti18n.t('app:dialog.format.txt', 'text'),\n\t\t\t\t\textensions:\t['txt']\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t).then((data) => {\n\t\t\n\t\tif( data.canceled === false ) {\n\t\t\t\n\t\t\trunExportProcess( data.filePath )\n\t\t}\n\t})\n\t\n\tfunction runExportProcess( filename ) {\n\t\t\n\t\tlet exported,\n\t\t\tfiletype\n\t\t\n\t\tswitch( filename.split('.').pop() ) {\n\t\t\t\n\t\t\tcase 'html':\n\t\t\t\t\n\t\t\t\tlet html = marked( note.content )\n\t\t\t\t\n\t\t\t\texported = pretty( `<!doctype html><html lang=\"${i18n.language}\"><head><meta charset=\"utf-8\" /><title>${note.title}</title></head><body>${html}</body></html>`, {ocd: true} )\n\t\t\t\t\n\t\t\t\tfiletype = 'html'\n\t\t\t\t\n\t\t\tbreak\n\t\t\t\n\t\t\tcase 'txt':\n\t\t\t\t\n\t\t\t\texported = removeMarkdown( note.content )\n\t\t\t\tfiletype = 'text'\n\t\t\t\n\t\t\tbreak\n\t\t\t\n\t\t\tdefault:\n\t\t\t\t\n\t\t\t\texported = note.content\n\t\t\t\tfiletype = 'markdown'\n\t\t}\n\t\t\n\t\tfs.outputFile(filename, exported)\n\t\t.then(() => fs.readFile(filename, 'utf8'))\n\t\t.then((data) => {\n\t\t\t\n\t\t\tlet exportNotification = new Notification('CloudInk', {\n\t\t\t\t\n\t\t\t\tbody: i18n.t('app:notification.export.text', 'The note {{title}} has been exported as {{filetype}}', {title: note.title, filetype: filetype})\n\t\t\t})\n\t\t})\n\t\t\n\t\t.catch(err => {\n\t\t\t\n\t\t\tlog.error( err )\n\t\t})\n\t}\n}\n"],"file":"../export.min.js"}