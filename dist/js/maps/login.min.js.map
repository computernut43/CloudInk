{"version":3,"names":[],"mappings":"","sources":["login.js"],"sourcesContent":["'use strict'\n\nconst i18n \t\t\t\t= require( './i18n.min' )\nconst {ipcRenderer} \t= require( 'electron' )\nconst Store \t\t\t= require( 'electron-store' )\nconst store \t\t\t= new Store()\nconst Mousetrap \t\t= require( 'mousetrap' )\n\n// Safe remote initialization with fallback\nlet remote\ntry {\n\tconst remoteModule = require( '@electron/remote' )\n\tremote = remoteModule\n\tconsole.log('DEBUG: Login remote initialized:', !!remote)\n} catch (error) {\n\tconsole.error('DEBUG: Login remote initialization failed:', error)\n\tremote = null\n}\n\nconst log\t\t\t\t= require( 'electron-log' )\nconst $ \t\t\t\t= require( 'jquery' )\nconst jqueryI18next \t= require( 'jquery-i18next' )\n\n\njqueryI18next.init(i18n, $)\n\n\n\n//note(dgmid): log exceptions\n\nwindow.onerror = function( error, url, line ) {\n\t\n\tipcRenderer.send( 'error-in-render', {error, url, line} )\n}\n\n\n\n//note(dgmid): set lang & localize strings\n\n$('html').attr('lang', i18n.language)\n$('header').localize()\n$('label').localize()\n$('input').localize()\n$('.cert-warning span').localize()\n$('button').localize()\n\n\n\n//note(dgmid): register kbd shortcut\n\nMousetrap.bind('command+.', function() {\n\t\n\tcloseModal()\n})\n\n\n\n//note(dgmid): get login credentials\n\nlet \tserver \t\t= store.get( 'loginCredentials.server' ),\n\t\tusername \t= store.get( 'loginCredentials.username' ),\n\t\tpassword \t= store.get( 'loginCredentials.password' )\n\nif( server ) { $('input[name=\"server\"]').val( server ) }\n\n\n\n//note(dgmid): close modal\n\nfunction closeModal() {\n\t\n\tconsole.log('DEBUG: Login closeModal called, remote available:', !!remote)\n\tif (remote && remote.getCurrentWindow) {\n\t\ttry {\n\t\t\tconst modal = remote.getCurrentWindow()\n\t\t\tmodal.close()\n\t\t\tconsole.log('DEBUG: Login modal closed via remote')\n\t\t} catch (error) {\n\t\t\tconsole.error('DEBUG: Error closing login modal via remote:', error)\n\t\t\t// Fallback: send IPC message to parent to close modal\n\t\t\tipcRenderer.send('close-login-modal-request')\n\t\t}\n\t} else {\n\t\tconsole.log('DEBUG: Remote not available, using IPC fallback')\n\t\t// Fallback: send IPC message to parent to close modal\n\t\tipcRenderer.send('close-login-modal-request')\n\t}\n}\n\n\n\n//note(dgmid): update-theme\n\nipcRenderer.on('set-theme', (event, message) => {\n\t\n\t__setTheme()\n})\n\n// Ensure theme is properly set when modal loads\nfunction ensureTheme() {\n\tconsole.log('DEBUG: Ensuring theme is set for login modal')\n\tconsole.log('DEBUG: Current data-theme:', document.documentElement.getAttribute('data-theme'))\n\t\n\t// Force theme update if not set properly\n\tif (typeof __setTheme === 'function') {\n\t\t__setTheme()\n\t}\n\t\n\t// Log the current theme state\n\tconsole.log('DEBUG: After theme update, data-theme:', document.documentElement.getAttribute('data-theme'))\n\tconsole.log('DEBUG: OS theme from localStorage:', localStorage.os_theme)\n}\n\n\n\n$(document).ready(function() {\t\n\t\n\t// Ensure theme is properly applied\n\tensureTheme()\n\t\n\t//note(dgmid): set button states\n\t\n\tif( server ) {\n\t\t\n\t\tif( username && password ) {\n\t\t\t\n\t\t\t$('#update').prop('disabled', true)\n\t\t\t$('#logout').prop('disabled', false)\n\t\t\n\t\t} else {\n\t\t\t\n\t\t\t$('#update').prop('disabled', false)\n\t\t\t$('#logout').prop('disabled', true)\n\t\t}\n\t\t\n\t} else {\n\t\t\n\t\t$('#update').prop('disabled', false)\n\t\t$('#logout').prop('disabled', true)\n\t}\n\t\n\t$('#nocertificate').prop('checked', store.get('appSettings.nocertificate'))\n\t\n\t\n\t//note(dgmid): no certificate\n\t\n\t$('#nocertificate').click(function() {\n\t\t\n\t\tlet cert = $(this).is(':checked')\n\t\t\n\t\tif( cert === true ) {\n\t\t\t\n\t\t\tlog.warn(`allowing unsecure connection`)\n\t\t\n\t\t} else {\n\t\t\t\n\t\t\tlog.info(`using secure connection`)\n\t\t}\n\t\t\n\t\tstore.set('appSettings.nocertificate', cert)\n\t})\n\t\n\t\n\t//note(dgmid): cancel modal\n\t\n\t$('#cancel').click( function() {\n\t\t\n\t\tcloseModal()\n\t})\n\t\n\t\n\t//note(dgmid): update data\n\t\n\t$('#modal-form').submit( function( e ) {\n\t\t\n\t\te.preventDefault()\n\t\t\n\t\tlet theserver = $('input[name=\"server\"]').val()\n\t\t\n\t\tstore.set( 'loginCredentials.server', theserver )\n\t\tipcRenderer.send( 'loginflow', theserver )\n\t\tcloseModal()\n\t})\n\t\n\t\n\t//note(dgmid): logout\n\t\n\t$('#logout').click( function() {\n\t\t\n\t\tstore.set( 'loginCredentials', {\n\t\t\t\n\t\t\tserver: '',\n\t\t\tusername: '',\n\t\t\tpassword: ''\n\t\t})\n\t\t\n\t\tipcRenderer.send('reload-sidebar', 'logout')\n\t\tcloseModal()\n\t})\n})\n"],"file":"../login.min.js"}