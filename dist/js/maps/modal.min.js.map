{"version":3,"names":[],"mappings":"","sources":["modal.js"],"sourcesContent":["'use strict'\n\nconst path = require( 'path' )\n\n// Safe remote initialization with fallback\nlet remote\ntry {\n\tconst remoteModule = require( '@electron/remote' )\n\tremote = remoteModule\n\tconsole.log('DEBUG: Modal remote initialized:', !!remote)\n} catch (error) {\n\tconsole.error('DEBUG: Modal remote initialization failed:', error)\n\tremote = null\n}\n\nlet modal\n\n\nmodule.exports = {\n\t\n\topenModal: function( url, width, height, resize ) {\n\t\t\n\t\tconsole.log('DEBUG: openModal called with:', { url, width, height, resize })\n\t\tconsole.log('DEBUG: remote object:', remote)\n\t\t\n\t\tif (!remote) {\n\t\t\tconsole.error('DEBUG: Remote module not available, cannot open modal')\n\t\t\treturn\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tmodal = new remote.BrowserWindow({\n\t\t\n\t\t\tparent: remote.getCurrentWindow(),\n\t\t\tmodal: true,\n\t\t\twidth: width,\n\t\t\tminWidth: width,\n\t\t\tmaxWidth: width,\n\t\t\theight: height,\n\t\t\tminHeight: height,\n\t\t\tresizable: resize,\n\t\t\tshow: false,\n\t\t\ttransparent: true,\n\t\t\tvibrancy: 'window',\n\t\t\twebPreferences: {\n\t\t\t\tdevTools: false,\n\t\t\t\tnodeIntegration: true,\n\t\t\t\tenableRemoteModule: true,\n\t\t\t\tcontextIsolation: false,\n\t\t\t\tpreload: path.join(__dirname, './preload.min.js')\n\t\t\t}\t\n\t\t})\n\t\t\n\t\tconsole.log('DEBUG: Modal BrowserWindow created successfully')\n\t\t\n\t\t// Enable remote module for modal window\n\t\ttry {\n\t\t\tconst remoteMain = require('@electron/remote/main')\n\t\t\tremoteMain.enable(modal.webContents)\n\t\t\tconsole.log('DEBUG: Remote enabled for modal webContents')\n\t\t} catch (error) {\n\t\t\tconsole.error('DEBUG: Failed to enable remote for modal:', error)\n\t\t}\n\t\t\n\t\tmodal.loadURL( url )\n\t\tconsole.log('DEBUG: Modal loadURL called')\n\t\t\n\t\tmodal.once('ready-to-show', () => {\n\t\t\tconsole.log('DEBUG: Modal ready to show')\n\t\t\tmodal.show()\n\t\t\tconsole.log('DEBUG: Modal show() called')\n\t\t})\n\t\t\n\t\t} catch (error) {\n\t\t\tconsole.error('DEBUG: Error in openModal:', error)\n\t\t}\t\n\t},\n\t\n\tcloseModal: function() {\n\t\t\n\t\tconsole.log('DEBUG: closeModal called, modal exists:', !!modal)\n\t\tif (modal) {\n\t\t\ttry {\n\t\t\t\tmodal.close()\n\t\t\t\tconsole.log('DEBUG: Modal closed successfully')\n\t\t\t\tmodal = null\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('DEBUG: Error closing modal:', error)\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log('DEBUG: No modal to close')\n\t\t}\n\t}\n}\n"],"file":"../modal.min.js"}